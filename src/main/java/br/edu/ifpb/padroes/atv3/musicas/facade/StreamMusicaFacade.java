package br.edu.ifpb.padroes.atv3.musicas.facade;

import br.edu.ifpb.padroes.atv3.musicas.abcd.ClienteHttpABCD;
import br.edu.ifpb.padroes.atv3.musicas.adapter.ServicoMusicaABCDAdapter;
import br.edu.ifpb.padroes.atv3.musicas.adapter.ServicoMusicaXPTOAdapter;
import br.edu.ifpb.padroes.atv3.musicas.comum.MusicaInfo;
import br.edu.ifpb.padroes.atv3.musicas.comum.ServicoMusica;
import br.edu.ifpb.padroes.atv3.musicas.decorator.*;
import br.edu.ifpb.padroes.atv3.musicas.proxy.ServicoMusicaProxy;
import br.edu.ifpb.padroes.atv3.musicas.xpto.ClientHttpXPTO;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Facade que unifica o acesso ao sistema de streaming de m√∫sica
 * Esconde a complexidade dos subsistemas e padr√µes implementados
 */
public class StreamMusicaFacade {

    private final List<ServicoMusica> servicos;
    private final TocadorMusicaInterface tocadorCompleto;
    private final ContadorMusicasDecorator contadorMusicas;
    private final EstatisticasArtistasDecorator estatisticasArtistas;
    private final EstatisticasGenerosDecorator estatisticasGeneros;

    public StreamMusicaFacade() {
        // Inicializa os servi√ßos com adapters e proxies
        this.servicos = new ArrayList<>();

        // Servi√ßo ABCD com cache
        ServicoMusica servicoABCD = new ServicoMusicaABCDAdapter(new ClienteHttpABCD());
        ServicoMusica servicoABCDComCache = new ServicoMusicaProxy(servicoABCD, 10); // 10 minutos de cache
        servicos.add(servicoABCDComCache);

        // Servi√ßo XPTO com cache
        ServicoMusica servicoXPTO = new ServicoMusicaXPTOAdapter(new ClientHttpXPTO());
        ServicoMusica servicoXPTOComCache = new ServicoMusicaProxy(servicoXPTO, 10); // 10 minutos de cache
        servicos.add(servicoXPTOComCache);

        // Inicializa o tocador com todos os decorators
        TocadorMusicaInterface tocadorBasico = new TocadorMusicaBasico();
        LogMusicaDecorator logDecorator = new LogMusicaDecorator(tocadorBasico);
        this.contadorMusicas = new ContadorMusicasDecorator(logDecorator);
        this.estatisticasArtistas = new EstatisticasArtistasDecorator(contadorMusicas);
        this.estatisticasGeneros = new EstatisticasGenerosDecorator(estatisticasArtistas);
        this.tocadorCompleto = estatisticasGeneros;
    }

    /**
     * Lista todas as m√∫sicas de todos os servi√ßos
     */
    public List<MusicaInfo> listarTodasMusicas() {
        System.out.println("üîç Buscando m√∫sicas em todos os servi√ßos...");
        return servicos.stream()
                .flatMap(servico -> servico.listarMusicas().stream())
                .collect(Collectors.toList());
    }

    /**
     * Busca m√∫sicas por t√≠tulo em todos os servi√ßos
     */
    public List<MusicaInfo> buscarMusicasPorTitulo(String titulo) {
        System.out.println("üîç Buscando m√∫sicas por t√≠tulo: " + titulo);
        return servicos.stream()
                .flatMap(servico -> servico.buscarPorTitulo(titulo).stream())
                .collect(Collectors.toList());
    }

    /**
     * Busca m√∫sicas por artista em todos os servi√ßos
     */
    public List<MusicaInfo> buscarMusicasPorArtista(String artista) {
        System.out.println("üîç Buscando m√∫sicas por artista: " + artista);
        return servicos.stream()
                .flatMap(servico -> servico.buscarPorArtista(artista).stream())
                .collect(Collectors.toList());
    }

    /**
     * Busca m√∫sicas por g√™nero em todos os servi√ßos
     */
    public List<MusicaInfo> buscarMusicasPorGenero(String genero) {
        System.out.println("üîç Buscando m√∫sicas por g√™nero: " + genero);
        return servicos.stream()
                .flatMap(servico -> servico.buscarPorGenero(genero).stream())
                .collect(Collectors.toList());
    }

    /**
     * Toca uma m√∫sica com todas as funcionalidades (logging, estat√≠sticas, etc.)
     */
    public void tocarMusica(MusicaInfo musica) {
        tocadorCompleto.tocarMusica(musica);
    }

    /**
     * Toca a primeira m√∫sica encontrada pelo t√≠tulo
     */
    public void tocarMusicaPorTitulo(String titulo) {
        List<MusicaInfo> musicas = buscarMusicasPorTitulo(titulo);
        if (!musicas.isEmpty()) {
            tocarMusica(musicas.get(0));
        } else {
            System.out.println("‚ùå M√∫sica n√£o encontrada: " + titulo);
        }
    }

    /**
     * Retorna estat√≠sticas gerais do sistema
     */
    public String getEstatisticasGerais() {
        StringBuilder stats = new StringBuilder();
        stats.append("üìä === ESTAT√çSTICAS DO SISTEMA ===\n");
        stats.append("Total de m√∫sicas tocadas: ").append(contadorMusicas.getContadorMusicas()).append("\n");
        stats.append("Artista mais tocado: ").append(estatisticasArtistas.getArtistaMaisTocado()).append("\n");
        stats.append("G√™nero mais tocado: ").append(estatisticasGeneros.getGeneroMaisTocado()).append("\n");
        stats.append("Top 3 artistas: ").append(estatisticasArtistas.getTopArtistas(3)).append("\n");
        stats.append("Top 3 g√™neros: ").append(estatisticasGeneros.getTopGeneros(3));
        return stats.toString();
    }

    /**
     * Reseta todas as estat√≠sticas
     */
    public void resetarEstatisticas() {
        contadorMusicas.resetarContador();
        estatisticasArtistas.resetarEstatisticas();
        estatisticasGeneros.resetarEstatisticas();
        System.out.println("‚úÖ Todas as estat√≠sticas foram resetadas");
    }

    /**
     * Limpa o cache de todos os servi√ßos
     */
    public void limparCache() {
        servicos.stream()
                .filter(servico -> servico instanceof ServicoMusicaProxy)
                .map(servico -> (ServicoMusicaProxy) servico)
                .forEach(ServicoMusicaProxy::limparCache);
        System.out.println("‚úÖ Cache de todos os servi√ßos foi limpo");
    }

    /**
     * Mostra informa√ß√µes sobre o cache
     */
    public void mostrarInfoCache() {
        System.out.println("üìä === INFORMA√á√ïES DO CACHE ===");
        servicos.stream()
                .filter(servico -> servico instanceof ServicoMusicaProxy)
                .map(servico -> (ServicoMusicaProxy) servico)
                .forEach(proxy -> System.out.println(proxy.getEstatisticasCache()));
    }

    /**
     * Lista todos os servi√ßos dispon√≠veis
     */
    public void listarServicosDisponiveis() {
        System.out.println("üéµ === SERVI√áOS DISPON√çVEIS ===");
        System.out.println("1. Servi√ßo ABCD (M√∫sica Brasileira) - localhost:3000");
        System.out.println("2. Servi√ßo XPTO (M√∫sica Internacional) - localhost:4000");
        System.out.println("Total de servi√ßos: " + servicos.size());
    }
}
